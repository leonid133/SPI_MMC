C51 COMPILER V9.00   TARSERVO                                                              04/17/2012 13:44:00 PAGE 1   


C51 COMPILER V9.00, COMPILATION OF MODULE TARSERVO
OBJECT MODULE PLACED IN tarservo.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.exe tarservo.c DB OE BR

line level    source

   1          #include "c8051f120.h"
   2          #include "tarservo.h"
   3          #include "init.h"
   4          #include "servo.h"
   5          #include <intrins.h>
   6          #include <float.h>
   7          #include "mmcflash.h"
   8          
   9          
  10          #define NBFM            50
  11          xdata char BuferFromModem [NBFM]; // Для анализа с последовательного порта
  12          xdata char wBFM, rBFM, marBFM;   
  13          
  14          //Для работы с флешкой
  15                  xdata unsigned char Buffer[512];
  16          
  17                  typedef union {                        // byte-addressable unsigned long
  18                unsigned long l;
  19                unsigned char b[4];
  20                  } ULONG;
  21          
  22                  ULONG Addr;
  23                  
  24          
  25          //xdata unsigned int Value[16]; 
  26          
  27          void UART0_isr(void);
  28          void UART1_isr(void);
  29          void Timer0_isr(void);
  30          
  31          //-----------------------------------------------------------------------
  32          void main(void)
  33          {
  34   1              xdata unsigned int i, i2;
  35   1      
  36   1              //Для работы с последовательным портом "Модем"
  37   1              xdata char RK_code[26], nByte = 0, KontrSumma = 0, PWM;
  38   1              unsigned int Value;     
  39   1      
  40   1              WDTCN = 0xde;                   //Стоп сторожевой таймер
  41   1              WDTCN = 0xad;
  42   1      //   WDTCN = 0x07;         // Макс время = 0,021 с
  43   1      
  44   1         FLSCL = FLSCL | 1;   //Разрешение стирания/записи FLASH памяти
  45   1      
  46   1              port_init(); 
  47   1              sysclk();       
  48   1              UART0_Init();   
  49   1              UART1_Init(); 
  50   1              DAC0_init();    
  51   1              ADC_init();
  52   1              Timer0_init(); 
  53   1              config();
  54   1      //--------------- SPI MMC ----------------
  55   1              SPI_Init();
C51 COMPILER V9.00   TARSERVO                                                              04/17/2012 13:44:00 PAGE 2   

  56   1              //SD_init();
  57   1              MMC_init();
  58   1      for (i2 = 0; i2 < 10; i2++)
  59   1      {
  60   2              ReadMMC(0x00000000);
  61   2              Addr.b[0] = Buffer[0];
  62   2              Addr.b[1] = Buffer[1];
  63   2              Addr.b[2] = Buffer[2];
  64   2              Addr.b[3] = Buffer[3];
  65   2              Addr.l = Addr.l + 0x00000200; 
  66   2              if(Addr.l >= 0x40000000) 
  67   2                      Addr.l=0x00000200; //1Gb
  68   2              Buffer[0] = Addr.b[0];
  69   2              Buffer[1] = Addr.b[1];
  70   2              Buffer[2] = Addr.b[2];
  71   2              Buffer[3] = Addr.b[3];
  72   2              WriteMMC(0x00000000);
  73   2              for (i = 0; i < 512; i++)
  74   2              {       
  75   3                      Buffer[i] = 0xAB; //здесь нужно заполнять буфер данными
  76   3              }
  77   2              WriteMMC(Addr.l); //Запись данных
  78   2      }
  79   1              
  80   1      //--------------- SPI MMC end ------------
  81   1      
  82   1      //      DAC0 = 0x00;
  83   1      
  84   1      
  85   1      //------------------
  86   1      
  87   1      
  88   1              rBFM = wBFM = marBFM = 0;
  89   1              for(PWM = 1; PWM < 15; PWM++)
  90   1              {
  91   2                      Value = 37500;
  92   2                      write(PWM+112, Value);
  93   2              }
  94   1                      
  95   1              while(1)        
  96   1              {
  97   2              if(rBFM < wBFM+marBFM*NBFM)
  98   2              {
  99   3                              if ((BuferFromModem[rBFM] & 0xC0) == 0x40)      
 100   3                              {
 101   4                                      nByte = 0;
 102   4                                      KontrSumma = 0;
 103   4                                      PWM = BuferFromModem[rBFM] & 0x3f;
 104   4                              }
 105   3                              if (nByte > 25)
 106   3                                      nByte = 25;
 107   3                              RK_code[nByte] = BuferFromModem[rBFM] & 0x7f;
 108   3                              KontrSumma = KontrSumma^RK_code[nByte++];
 109   3      
 110   3                              if ( (nByte == 5) && (KontrSumma == 0) )
 111   3                              {
 112   4                                      Value = RK_code[1]+((unsigned int)RK_code[2] << 7)+((unsigned int)RK_code[3] << 14);
 113   4                                      write(PWM+112, Value);
 114   4                              }
 115   3      
 116   3               rBFM++;
 117   3                              if(rBFM >= NBFM)
C51 COMPILER V9.00   TARSERVO                                                              04/17/2012 13:44:00 PAGE 3   

 118   3                              {
 119   4                              rBFM = 0;
 120   4                                      marBFM = 0;     
 121   4                              }
 122   3            }
 123   2                      
 124   2              }       //while (1)
 125   1              return;
 126   1      }
 127          
 128          //-------------------------------------------------------------------
 129          void UART0_isr(void) interrupt 4
 130          {
 131   1              xdata char SFRPAGE_SAVE = SFRPAGE;
 132   1              SFRPAGE = UART0_PAGE;
 133   1              
 134   1              if (RI0)  
 135   1              { 
 136   2                      BuferFromModem [wBFM++] = SBUF0;  // read character
 137   2                      if(wBFM >= NBFM)
 138   2                      {
 139   3                      wBFM = 0;
 140   3                              marBFM = 1;     
 141   3                      }      
 142   2                      RI0 = 0;                
 143   2              }
 144   1              if (TI0)
 145   1                      TI0 = 0;
 146   1      
 147   1              SFRPAGE = SFRPAGE_SAVE;
 148   1              return;
 149   1      }
 150          
 151          //---------------------------------------------------------------------------------
 152          void UART1_isr(void) interrupt 20
 153          {
 154   1              xdata char SFRPAGE_SAVE = SFRPAGE;//, tmp;
 155   1              SFRPAGE = UART1_PAGE;                                                     
 156   1      
 157   1              if (RI1)  
 158   1                      RI1 = 0;
 159   1      
 160   1              TI1 = 0;
 161   1              SFRPAGE = SFRPAGE_SAVE;
 162   1              return;
 163   1      }
 164          
 165          //----------------------------------------------------------------------
 166          void TIMER0_ISR (void) interrupt 1
 167          {
 168   1              xdata char SFRPAGE_SAVE = SFRPAGE;
 169   1              SFRPAGE = 0;
 170   1      
 171   1              TH0 = 0xAE;     // 0xFFFF-49766400/48/FREQ = 0xAEFF
 172   1              TL0 = 0xFF;     
 173   1      
 174   1              SFRPAGE = SFRPAGE_SAVE;
 175   1              return;
 176   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
C51 COMPILER V9.00   TARSERVO                                                              04/17/2012 13:44:00 PAGE 4   

   CODE SIZE        =    768    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =    565      36
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      4       2
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
